   1              		.cpu cortex-a8
   2              		.eabi_attribute 27, 3
   3              		.fpu neon
   4              		.eabi_attribute 23, 1
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 2
   8              		.eabi_attribute 30, 2
   9              		.eabi_attribute 18, 4
  10              		.file	"alpha_time.c"
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.align	2
  21              		.p2align 4,,15
  22              		.global	main
  24              	main:
  25              	.LFB11:
  26              		.file 1 "alpha_time.c"
   1:alpha_time.c  **** #include <stdio.h>
   2:alpha_time.c  **** #include <sys/time.h>
   3:alpha_time.c  **** 
   4:alpha_time.c  **** 
   5:alpha_time.c  **** #ifndef NEON
   6:alpha_time.c  **** void alphaBlend_c(int *fgImage, int *bgImage, int *dstImage);
   7:alpha_time.c  **** void alphaBlend_flat(int *fgImage, int *bgImage, int *dstImage);
   8:alpha_time.c  **** int backImage[512 * 512];
   9:alpha_time.c  **** int foreImage[512 * 512];
  10:alpha_time.c  **** int newImage[512 * 512];
  11:alpha_time.c  **** #else
  12:alpha_time.c  **** #include "NE10_types.h"
  13:alpha_time.c  **** extern ne10_result_t alphablend_neon(ne10_int32_t * dst, ne10_int32_t * src1, ne10_int32_t * src2);
  14:alpha_time.c  **** ne10_int32_t backImage[512 * 512];
  15:alpha_time.c  **** ne10_int32_t foreImage[512 * 512];
  16:alpha_time.c  **** ne10_int32_t newImage[512 * 512];
  17:alpha_time.c  **** #endif
  18:alpha_time.c  **** 
  19:alpha_time.c  **** int main(int argc, char**argv)
  20:alpha_time.c  **** {
  27              		.loc 1 20 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 16
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  21:alpha_time.c  ****    FILE *fgFile, *bgFile, *outFile;
  22:alpha_time.c  ****    int result;
  23:alpha_time.c  ****    struct timeval oldTv, newTv;
  24:alpha_time.c  **** 
  25:alpha_time.c  ****    if(argc != 4){
  32              		.loc 1 25 0
  33 0000 040050E3 		cmp	r0, #4
  20:alpha_time.c  **** {
  34              		.loc 1 20 0
  35 0004 F0412DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 24
  38 0008 0040A0E1 		mov	r4, r0
  39              		.cfi_offset 14, -4
  40              		.cfi_offset 8, -8
  41              		.cfi_offset 7, -12
  42              		.cfi_offset 6, -16
  43              		.cfi_offset 5, -20
  44              		.cfi_offset 4, -24
  45 000c 10D04DE2 		sub	sp, sp, #16
  46              	.LCFI1:
  47              		.cfi_def_cfa_offset 40
  20:alpha_time.c  **** {
  48              		.loc 1 20 0
  49 0010 0170A0E1 		mov	r7, r1
  50              		.loc 1 25 0
  51 0014 0900000A 		beq	.L2
  26:alpha_time.c  ****       fprintf(stderr, "Usage:%s foreground background outFile\n",argv[0]);
  52              		.loc 1 26 0
  53 0018 003000E3 		movw	r3, #:lower16:stderr
  54 001c 001000E3 		movw	r1, #:lower16:.LC0
  55              	.LVL1:
  56 0020 003040E3 		movt	r3, #:upper16:stderr
  57 0024 001040E3 		movt	r1, #:upper16:.LC0
  58 0028 002097E5 		ldr	r2, [r7, #0]
  59 002c 000093E5 		ldr	r0, [r3, #0]
  60              	.LVL2:
  61 0030 FEFFFFEB 		bl	fprintf
  27:alpha_time.c  ****       return 1;
  62              		.loc 1 27 0
  63 0034 0100A0E3 		mov	r0, #1
  64              	.LVL3:
  65              	.L3:
  28:alpha_time.c  ****    }
  29:alpha_time.c  ****    fgFile = fopen(argv[1], "rb");
  30:alpha_time.c  ****    bgFile = fopen(argv[2], "rb");
  31:alpha_time.c  ****    outFile = fopen(argv[3], "wb");
  32:alpha_time.c  **** 
  33:alpha_time.c  ****    if(fgFile && bgFile && outFile){
  34:alpha_time.c  ****      result = fread(backImage, 512*sizeof(int), 512, bgFile);
  35:alpha_time.c  ****      if(result != 512){
  36:alpha_time.c  ****        fprintf(stderr, "Error with backImage\n");
  37:alpha_time.c  ****        return 3;
  38:alpha_time.c  ****      }
  39:alpha_time.c  ****      result = fread(foreImage, 512*sizeof(int), 512, fgFile);
  40:alpha_time.c  ****      if(result != 512){
  41:alpha_time.c  ****        fprintf(stderr, "Error with foreImage\n");
  42:alpha_time.c  ****        return 4;
  43:alpha_time.c  ****      }
  44:alpha_time.c  ****      gettimeofday(&oldTv, NULL);
  45:alpha_time.c  **** #ifdef ORIGINAL
  46:alpha_time.c  ****      alphaBlend_c(&foreImage[0], &backImage[0], &newImage[0]);
  47:alpha_time.c  **** #elif FLAT
  48:alpha_time.c  ****      alphaBlend_flat(&foreImage[0], &backImage[0], &newImage[0]);
  49:alpha_time.c  **** #elif NEON
  50:alpha_time.c  **** 	 alphablend_neon(&newImage[0], &foreImage[0], &backImage[0]);
  51:alpha_time.c  **** #endif
  52:alpha_time.c  ****      gettimeofday(&newTv, NULL);
  53:alpha_time.c  ****      fprintf(stdout, "Routine took %d microseconds\n", (int)(newTv.tv_usec - oldTv.tv_usec));
  54:alpha_time.c  ****      fwrite(newImage, 512*sizeof(int),512,outFile);
  55:alpha_time.c  ****      fclose(fgFile);
  56:alpha_time.c  ****      fclose(bgFile);
  57:alpha_time.c  ****      fclose(outFile);
  58:alpha_time.c  ****      return 0;
  59:alpha_time.c  ****    }
  60:alpha_time.c  ****    fprintf(stderr, "Problem opening a file\n");
  61:alpha_time.c  ****    return 2;
  62:alpha_time.c  **** }
  66              		.loc 1 62 0
  67 0038 10D08DE2 		add	sp, sp, #16
  68 003c F081BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
  69              	.LVL4:
  70              		.p2align 4
  71              	.L2:
  29:alpha_time.c  ****    fgFile = fopen(argv[1], "rb");
  72              		.loc 1 29 0
  73 0040 001000E3 		movw	r1, #:lower16:.LC1
  74              	.LVL5:
  75 0044 040097E5 		ldr	r0, [r7, #4]
  76 0048 001040E3 		movt	r1, #:upper16:.LC1
  77 004c FEFFFFEB 		bl	fopen
  30:alpha_time.c  ****    bgFile = fopen(argv[2], "rb");
  78              		.loc 1 30 0
  79 0050 001000E3 		movw	r1, #:lower16:.LC1
  80 0054 001040E3 		movt	r1, #:upper16:.LC1
  29:alpha_time.c  ****    fgFile = fopen(argv[1], "rb");
  81              		.loc 1 29 0
  82 0058 0060A0E1 		mov	r6, r0
  83              	.LVL6:
  30:alpha_time.c  ****    bgFile = fopen(argv[2], "rb");
  84              		.loc 1 30 0
  85 005c 080097E5 		ldr	r0, [r7, #8]
  86              	.LVL7:
  87 0060 FEFFFFEB 		bl	fopen
  31:alpha_time.c  ****    outFile = fopen(argv[3], "wb");
  88              		.loc 1 31 0
  89 0064 001000E3 		movw	r1, #:lower16:.LC2
  90 0068 001040E3 		movt	r1, #:upper16:.LC2
  30:alpha_time.c  ****    bgFile = fopen(argv[2], "rb");
  91              		.loc 1 30 0
  92 006c 0050A0E1 		mov	r5, r0
  93              	.LVL8:
  31:alpha_time.c  ****    outFile = fopen(argv[3], "wb");
  94              		.loc 1 31 0
  95 0070 0C0097E5 		ldr	r0, [r7, #12]
  96              	.LVL9:
  97 0074 FEFFFFEB 		bl	fopen
  33:alpha_time.c  ****    if(fgFile && bgFile && outFile){
  98              		.loc 1 33 0
  99 0078 000055E3 		cmp	r5, #0
 100 007c 00005613 		cmpne	r6, #0
  31:alpha_time.c  ****    outFile = fopen(argv[3], "wb");
 101              		.loc 1 31 0
 102 0080 0070A0E1 		mov	r7, r0
 103              	.LVL10:
  33:alpha_time.c  ****    if(fgFile && bgFile && outFile){
 104              		.loc 1 33 0
 105 0084 1500000A 		beq	.L4
  33:alpha_time.c  ****    if(fgFile && bgFile && outFile){
 106              		.loc 1 33 0 is_stmt 0 discriminator 1
 107 0088 000050E3 		cmp	r0, #0
 108 008c 1300000A 		beq	.L4
  34:alpha_time.c  ****      result = fread(backImage, 512*sizeof(int), 512, bgFile);
 109              		.loc 1 34 0 is_stmt 1
 110 0090 000000E3 		movw	r0, #:lower16:backImage
 111              	.LVL11:
 112 0094 022CA0E3 		mov	r2, #512
 113 0098 021BA0E3 		mov	r1, #2048
 114 009c 000040E3 		movt	r0, #:upper16:backImage
 115 00a0 0530A0E1 		mov	r3, r5
 116 00a4 FEFFFFEB 		bl	fread
  35:alpha_time.c  ****      if(result != 512){
 117              		.loc 1 35 0
 118 00a8 020C50E3 		cmp	r0, #512
  34:alpha_time.c  ****      result = fread(backImage, 512*sizeof(int), 512, bgFile);
 119              		.loc 1 34 0
 120 00ac 0020A0E1 		mov	r2, r0
 121              	.LVL12:
  35:alpha_time.c  ****      if(result != 512){
 122              		.loc 1 35 0
 123 00b0 1600000A 		beq	.L5
  36:alpha_time.c  ****        fprintf(stderr, "Error with backImage\n");
 124              		.loc 1 36 0
 125 00b4 00C000E3 		movw	ip, #:lower16:stderr
 126 00b8 000000E3 		movw	r0, #:lower16:.LC3
 127              	.LVL13:
 128 00bc 00C040E3 		movt	ip, #:upper16:stderr
 129 00c0 000040E3 		movt	r0, #:upper16:.LC3
 130 00c4 0110A0E3 		mov	r1, #1
 131 00c8 1520A0E3 		mov	r2, #21
 132              	.LVL14:
 133 00cc 00309CE5 		ldr	r3, [ip, #0]
 134 00d0 FEFFFFEB 		bl	fwrite
  37:alpha_time.c  ****        return 3;
 135              		.loc 1 37 0
 136 00d4 0300A0E3 		mov	r0, #3
 137 00d8 D6FFFFEA 		b	.L3
 138 00dc 00F020E3 		.p2align 4
 139              	.L4:
  60:alpha_time.c  ****    fprintf(stderr, "Problem opening a file\n");
 140              		.loc 1 60 0
 141 00e0 00C000E3 		movw	ip, #:lower16:stderr
 142 00e4 000000E3 		movw	r0, #:lower16:.LC6
 143 00e8 00C040E3 		movt	ip, #:upper16:stderr
 144 00ec 000040E3 		movt	r0, #:upper16:.LC6
 145 00f0 0110A0E3 		mov	r1, #1
 146 00f4 1720A0E3 		mov	r2, #23
 147 00f8 00309CE5 		ldr	r3, [ip, #0]
 148 00fc FEFFFFEB 		bl	fwrite
  61:alpha_time.c  ****    return 2;
 149              		.loc 1 61 0
 150 0100 0200A0E3 		mov	r0, #2
 151 0104 CBFFFFEA 		b	.L3
 152              	.LVL15:
 153 0108 00F020E3 		.p2align 4
 153      00F020E3 
 154              	.L5:
  39:alpha_time.c  ****      result = fread(foreImage, 512*sizeof(int), 512, fgFile);
 155              		.loc 1 39 0
 156 0110 000000E3 		movw	r0, #:lower16:foreImage
 157              	.LVL16:
 158 0114 021BA0E3 		mov	r1, #2048
 159 0118 000040E3 		movt	r0, #:upper16:foreImage
 160 011c 0630A0E1 		mov	r3, r6
 161 0120 FEFFFFEB 		bl	fread
 162              	.LVL17:
  40:alpha_time.c  ****      if(result != 512){
 163              		.loc 1 40 0
 164 0124 020C50E3 		cmp	r0, #512
  39:alpha_time.c  ****      result = fread(foreImage, 512*sizeof(int), 512, fgFile);
 165              		.loc 1 39 0
 166 0128 0080A0E1 		mov	r8, r0
 167              	.LVL18:
  40:alpha_time.c  ****      if(result != 512){
 168              		.loc 1 40 0
 169 012c 0900000A 		beq	.L6
  41:alpha_time.c  ****        fprintf(stderr, "Error with foreImage\n");
 170              		.loc 1 41 0
 171 0130 00E000E3 		movw	lr, #:lower16:stderr
 172 0134 000000E3 		movw	r0, #:lower16:.LC4
 173              	.LVL19:
 174 0138 00E040E3 		movt	lr, #:upper16:stderr
 175 013c 000040E3 		movt	r0, #:upper16:.LC4
 176 0140 0110A0E3 		mov	r1, #1
 177 0144 1520A0E3 		mov	r2, #21
 178 0148 00309EE5 		ldr	r3, [lr, #0]
 179 014c FEFFFFEB 		bl	fwrite
  42:alpha_time.c  ****        return 4;
 180              		.loc 1 42 0
 181 0150 0400A0E1 		mov	r0, r4
 182 0154 B7FFFFEA 		b	.L3
 183              	.L6:
  44:alpha_time.c  ****      gettimeofday(&oldTv, NULL);
 184              		.loc 1 44 0
 185 0158 0010A0E3 		mov	r1, #0
 186 015c 08008DE2 		add	r0, sp, #8
 187 0160 FEFFFFEB 		bl	gettimeofday
  52:alpha_time.c  ****      gettimeofday(&newTv, NULL);
 188              		.loc 1 52 0
 189 0164 0010A0E3 		mov	r1, #0
 190 0168 0D00A0E1 		mov	r0, sp
 191 016c FEFFFFEB 		bl	gettimeofday
  53:alpha_time.c  ****      fprintf(stdout, "Routine took %d microseconds\n", (int)(newTv.tv_usec - oldTv.tv_usec));
 192              		.loc 1 53 0
 193 0170 000000E3 		movw	r0, #:lower16:stdout
 194 0174 0C309DE5 		ldr	r3, [sp, #12]
 195 0178 000040E3 		movt	r0, #:upper16:stdout
 196 017c 04209DE5 		ldr	r2, [sp, #4]
 197 0180 001000E3 		movw	r1, #:lower16:.LC5
 198 0184 001040E3 		movt	r1, #:upper16:.LC5
 199 0188 000090E5 		ldr	r0, [r0, #0]
 200 018c 022063E0 		rsb	r2, r3, r2
 201 0190 FEFFFFEB 		bl	fprintf
  54:alpha_time.c  ****      fwrite(newImage, 512*sizeof(int),512,outFile);
 202              		.loc 1 54 0
 203 0194 000000E3 		movw	r0, #:lower16:newImage
 204 0198 021BA0E3 		mov	r1, #2048
 205 019c 0820A0E1 		mov	r2, r8
 206 01a0 0730A0E1 		mov	r3, r7
 207 01a4 000040E3 		movt	r0, #:upper16:newImage
 208 01a8 FEFFFFEB 		bl	fwrite
  55:alpha_time.c  ****      fclose(fgFile);
 209              		.loc 1 55 0
 210 01ac 0600A0E1 		mov	r0, r6
 211 01b0 FEFFFFEB 		bl	fclose
  56:alpha_time.c  ****      fclose(bgFile);
 212              		.loc 1 56 0
 213 01b4 0500A0E1 		mov	r0, r5
 214 01b8 FEFFFFEB 		bl	fclose
  57:alpha_time.c  ****      fclose(outFile);
 215              		.loc 1 57 0
 216 01bc 0700A0E1 		mov	r0, r7
 217 01c0 FEFFFFEB 		bl	fclose
  58:alpha_time.c  ****      return 0;
 218              		.loc 1 58 0
 219 01c4 0000A0E3 		mov	r0, #0
 220 01c8 9AFFFFEA 		b	.L3
 221              		.cfi_endproc
 222              	.LFE11:
 224              		.comm	backImage,1048576,16
 225              		.comm	foreImage,1048576,16
 226              		.comm	newImage,1048576,16
 227              		.section	.rodata.str1.4,"aMS",%progbits,1
 228              		.align	2
 229              	.LC0:
 230 0000 55736167 		.ascii	"Usage:%s foreground background outFile\012\000"
 230      653A2573 
 230      20666F72 
 230      6567726F 
 230      756E6420 
 231              	.LC1:
 232 0028 726200   		.ascii	"rb\000"
 233 002b 00       		.space	1
 234              	.LC2:
 235 002c 776200   		.ascii	"wb\000"
 236 002f 00       		.space	1
 237              	.LC3:
 238 0030 4572726F 		.ascii	"Error with backImage\012\000"
 238      72207769 
 238      74682062 
 238      61636B49 
 238      6D616765 
 239 0046 0000     		.space	2
 240              	.LC4:
 241 0048 4572726F 		.ascii	"Error with foreImage\012\000"
 241      72207769 
 241      74682066 
 241      6F726549 
 241      6D616765 
 242 005e 0000     		.space	2
 243              	.LC5:
 244 0060 526F7574 		.ascii	"Routine took %d microseconds\012\000"
 244      696E6520 
 244      746F6F6B 
 244      20256420 
 244      6D696372 
 245 007e 0000     		.space	2
 246              	.LC6:
 247 0080 50726F62 		.ascii	"Problem opening a file\012\000"
 247      6C656D20 
 247      6F70656E 
 247      696E6720 
 247      61206669 
 248              		.text
 249              	.Letext0:
