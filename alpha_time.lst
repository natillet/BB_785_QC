   1              		.cpu cortex-a8
   2              		.eabi_attribute 27, 3
   3              		.fpu neon
   4              		.eabi_attribute 23, 1
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 2
   8              		.eabi_attribute 30, 2
   9              		.eabi_attribute 18, 4
  10              		.file	"alpha_time.c"
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.align	2
  21              		.p2align 4,,15
  22              		.global	main
  24              	main:
  25              	.LFB14:
  26              		.file 1 "alpha_time.c"
   1:alpha_time.c  **** #include <stdio.h>
   2:alpha_time.c  **** #include <sys/time.h>
   3:alpha_time.c  **** #include "NE10_types.h"
   4:alpha_time.c  **** 
   5:alpha_time.c  **** extern ne10_result_t alphablend_neon(ne10_int32_t * dst, ne10_int32_t * src1, ne10_int32_t * src2);
   6:alpha_time.c  **** void alphaBlend_c(int *fgImage, int *bgImage, int *dstImage);
   7:alpha_time.c  **** void alphaBlend_flat(int *fgImage, int *bgImage, int *dstImage);
   8:alpha_time.c  **** 
   9:alpha_time.c  **** #ifndef NEON
  10:alpha_time.c  **** int backImage[512 * 512];
  11:alpha_time.c  **** int foreImage[512 * 512];
  12:alpha_time.c  **** int newImage[512 * 512];
  13:alpha_time.c  **** #else
  14:alpha_time.c  **** ne10_int32_t backImage[512 * 512];
  15:alpha_time.c  **** ne10_int32_t foreImage[512 * 512];
  16:alpha_time.c  **** ne10_int32_t newImage[512 * 512];
  17:alpha_time.c  **** #endif
  18:alpha_time.c  **** 
  19:alpha_time.c  **** int main(int argc, char**argv)
  20:alpha_time.c  **** {
  27              		.loc 1 20 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 16
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  21:alpha_time.c  ****    FILE *fgFile, *bgFile, *outFile;
  22:alpha_time.c  ****    int result;
  23:alpha_time.c  ****    struct timeval oldTv, newTv;
  24:alpha_time.c  **** 
  25:alpha_time.c  ****    if(argc != 4){
  32              		.loc 1 25 0
  33 0000 040050E3 		cmp	r0, #4
  20:alpha_time.c  **** {
  34              		.loc 1 20 0
  35 0004 F0412DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 24
  38 0008 0040A0E1 		mov	r4, r0
  39              		.cfi_offset 14, -4
  40              		.cfi_offset 8, -8
  41              		.cfi_offset 7, -12
  42              		.cfi_offset 6, -16
  43              		.cfi_offset 5, -20
  44              		.cfi_offset 4, -24
  45 000c 10D04DE2 		sub	sp, sp, #16
  46              	.LCFI1:
  47              		.cfi_def_cfa_offset 40
  20:alpha_time.c  **** {
  48              		.loc 1 20 0
  49 0010 0170A0E1 		mov	r7, r1
  50              		.loc 1 25 0
  51 0014 0900000A 		beq	.L2
  26:alpha_time.c  ****       fprintf(stderr, "Usage:%s foreground background outFile\n",argv[0]);
  52              		.loc 1 26 0
  53 0018 003000E3 		movw	r3, #:lower16:stderr
  54 001c 001000E3 		movw	r1, #:lower16:.LC0
  55              	.LVL1:
  56 0020 003040E3 		movt	r3, #:upper16:stderr
  57 0024 001040E3 		movt	r1, #:upper16:.LC0
  58 0028 002097E5 		ldr	r2, [r7, #0]
  59 002c 000093E5 		ldr	r0, [r3, #0]
  60              	.LVL2:
  61 0030 FEFFFFEB 		bl	fprintf
  27:alpha_time.c  ****       return 1;
  62              		.loc 1 27 0
  63 0034 0100A0E3 		mov	r0, #1
  64              	.LVL3:
  65              	.L3:
  28:alpha_time.c  ****    }
  29:alpha_time.c  ****    fgFile = fopen(argv[1], "rb");
  30:alpha_time.c  ****    bgFile = fopen(argv[2], "rb");
  31:alpha_time.c  ****    outFile = fopen(argv[3], "wb");
  32:alpha_time.c  **** 
  33:alpha_time.c  ****    if(fgFile && bgFile && outFile){
  34:alpha_time.c  ****      result = fread(backImage, 512*sizeof(int), 512, bgFile);
  35:alpha_time.c  ****      if(result != 512){
  36:alpha_time.c  ****        fprintf(stderr, "Error with backImage\n");
  37:alpha_time.c  ****        return 3;
  38:alpha_time.c  ****      }
  39:alpha_time.c  ****      result = fread(foreImage, 512*sizeof(int), 512, fgFile);
  40:alpha_time.c  ****      if(result != 512){
  41:alpha_time.c  ****        fprintf(stderr, "Error with foreImage\n");
  42:alpha_time.c  ****        return 4;
  43:alpha_time.c  ****      }
  44:alpha_time.c  ****      gettimeofday(&oldTv, NULL);
  45:alpha_time.c  **** #ifdef ORIGINAL
  46:alpha_time.c  ****      alphaBlend_c(&foreImage[0], &backImage[0], &newImage[0]);
  47:alpha_time.c  **** #elif FLAT
  48:alpha_time.c  ****      alphaBlend_flat(&foreImage[0], &backImage[0], &newImage[0]);
  49:alpha_time.c  **** #elif NEON
  50:alpha_time.c  **** 	 alphablend_neon(&newImage[0], &foreImage[0], &backImage[0]);
  51:alpha_time.c  **** #endif
  52:alpha_time.c  ****      gettimeofday(&newTv, NULL);
  53:alpha_time.c  ****      fprintf(stdout, "Routine took %d microseconds\n", (int)(newTv.tv_usec - oldTv.tv_usec));
  54:alpha_time.c  ****      fwrite(newImage, 512*sizeof(int),512,outFile);
  55:alpha_time.c  ****      fclose(fgFile);
  56:alpha_time.c  ****      fclose(bgFile);
  57:alpha_time.c  ****      fclose(outFile);
  58:alpha_time.c  ****      return 0;
  59:alpha_time.c  ****    }
  60:alpha_time.c  ****    fprintf(stderr, "Problem opening a file\n");
  61:alpha_time.c  ****    return 2;
  62:alpha_time.c  **** }
  66              		.loc 1 62 0
  67 0038 10D08DE2 		add	sp, sp, #16
  68 003c F081BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
  69              	.LVL4:
  70              		.p2align 4
  71              	.L2:
  29:alpha_time.c  ****    fgFile = fopen(argv[1], "rb");
  72              		.loc 1 29 0
  73 0040 001000E3 		movw	r1, #:lower16:.LC1
  74              	.LVL5:
  75 0044 040097E5 		ldr	r0, [r7, #4]
  76 0048 001040E3 		movt	r1, #:upper16:.LC1
  77 004c FEFFFFEB 		bl	fopen
  30:alpha_time.c  ****    bgFile = fopen(argv[2], "rb");
  78              		.loc 1 30 0
  79 0050 001000E3 		movw	r1, #:lower16:.LC1
  80 0054 001040E3 		movt	r1, #:upper16:.LC1
  29:alpha_time.c  ****    fgFile = fopen(argv[1], "rb");
  81              		.loc 1 29 0
  82 0058 0060A0E1 		mov	r6, r0
  83              	.LVL6:
  30:alpha_time.c  ****    bgFile = fopen(argv[2], "rb");
  84              		.loc 1 30 0
  85 005c 080097E5 		ldr	r0, [r7, #8]
  86              	.LVL7:
  87 0060 FEFFFFEB 		bl	fopen
  31:alpha_time.c  ****    outFile = fopen(argv[3], "wb");
  88              		.loc 1 31 0
  89 0064 001000E3 		movw	r1, #:lower16:.LC2
  90 0068 001040E3 		movt	r1, #:upper16:.LC2
  30:alpha_time.c  ****    bgFile = fopen(argv[2], "rb");
  91              		.loc 1 30 0
  92 006c 0050A0E1 		mov	r5, r0
  93              	.LVL8:
  31:alpha_time.c  ****    outFile = fopen(argv[3], "wb");
  94              		.loc 1 31 0
  95 0070 0C0097E5 		ldr	r0, [r7, #12]
  96              	.LVL9:
  97 0074 FEFFFFEB 		bl	fopen
  33:alpha_time.c  ****    if(fgFile && bgFile && outFile){
  98              		.loc 1 33 0
  99 0078 000055E3 		cmp	r5, #0
 100 007c 00005613 		cmpne	r6, #0
  31:alpha_time.c  ****    outFile = fopen(argv[3], "wb");
 101              		.loc 1 31 0
 102 0080 0070A0E1 		mov	r7, r0
 103              	.LVL10:
  33:alpha_time.c  ****    if(fgFile && bgFile && outFile){
 104              		.loc 1 33 0
 105 0084 1500000A 		beq	.L4
  33:alpha_time.c  ****    if(fgFile && bgFile && outFile){
 106              		.loc 1 33 0 is_stmt 0 discriminator 1
 107 0088 000050E3 		cmp	r0, #0
 108 008c 1300000A 		beq	.L4
  34:alpha_time.c  ****      result = fread(backImage, 512*sizeof(int), 512, bgFile);
 109              		.loc 1 34 0 is_stmt 1
 110 0090 000000E3 		movw	r0, #:lower16:backImage
 111              	.LVL11:
 112 0094 022CA0E3 		mov	r2, #512
 113 0098 021BA0E3 		mov	r1, #2048
 114 009c 000040E3 		movt	r0, #:upper16:backImage
 115 00a0 0530A0E1 		mov	r3, r5
 116 00a4 FEFFFFEB 		bl	fread
  35:alpha_time.c  ****      if(result != 512){
 117              		.loc 1 35 0
 118 00a8 020C50E3 		cmp	r0, #512
  34:alpha_time.c  ****      result = fread(backImage, 512*sizeof(int), 512, bgFile);
 119              		.loc 1 34 0
 120 00ac 0020A0E1 		mov	r2, r0
 121              	.LVL12:
  35:alpha_time.c  ****      if(result != 512){
 122              		.loc 1 35 0
 123 00b0 1600000A 		beq	.L5
  36:alpha_time.c  ****        fprintf(stderr, "Error with backImage\n");
 124              		.loc 1 36 0
 125 00b4 00C000E3 		movw	ip, #:lower16:stderr
 126 00b8 000000E3 		movw	r0, #:lower16:.LC3
 127              	.LVL13:
 128 00bc 00C040E3 		movt	ip, #:upper16:stderr
 129 00c0 000040E3 		movt	r0, #:upper16:.LC3
 130 00c4 0110A0E3 		mov	r1, #1
 131 00c8 1520A0E3 		mov	r2, #21
 132              	.LVL14:
 133 00cc 00309CE5 		ldr	r3, [ip, #0]
 134 00d0 FEFFFFEB 		bl	fwrite
  37:alpha_time.c  ****        return 3;
 135              		.loc 1 37 0
 136 00d4 0300A0E3 		mov	r0, #3
 137 00d8 D6FFFFEA 		b	.L3
 138 00dc 00F020E3 		.p2align 4
 139              	.L4:
  60:alpha_time.c  ****    fprintf(stderr, "Problem opening a file\n");
 140              		.loc 1 60 0
 141 00e0 00C000E3 		movw	ip, #:lower16:stderr
 142 00e4 000000E3 		movw	r0, #:lower16:.LC6
 143 00e8 00C040E3 		movt	ip, #:upper16:stderr
 144 00ec 000040E3 		movt	r0, #:upper16:.LC6
 145 00f0 0110A0E3 		mov	r1, #1
 146 00f4 1720A0E3 		mov	r2, #23
 147 00f8 00309CE5 		ldr	r3, [ip, #0]
 148 00fc FEFFFFEB 		bl	fwrite
  61:alpha_time.c  ****    return 2;
 149              		.loc 1 61 0
 150 0100 0200A0E3 		mov	r0, #2
 151 0104 CBFFFFEA 		b	.L3
 152              	.LVL15:
 153 0108 00F020E3 		.p2align 4
 153      00F020E3 
 154              	.L5:
  39:alpha_time.c  ****      result = fread(foreImage, 512*sizeof(int), 512, fgFile);
 155              		.loc 1 39 0
 156 0110 000000E3 		movw	r0, #:lower16:foreImage
 157              	.LVL16:
 158 0114 021BA0E3 		mov	r1, #2048
 159 0118 000040E3 		movt	r0, #:upper16:foreImage
 160 011c 0630A0E1 		mov	r3, r6
 161 0120 FEFFFFEB 		bl	fread
 162              	.LVL17:
  40:alpha_time.c  ****      if(result != 512){
 163              		.loc 1 40 0
 164 0124 020C50E3 		cmp	r0, #512
  39:alpha_time.c  ****      result = fread(foreImage, 512*sizeof(int), 512, fgFile);
 165              		.loc 1 39 0
 166 0128 0080A0E1 		mov	r8, r0
 167              	.LVL18:
  40:alpha_time.c  ****      if(result != 512){
 168              		.loc 1 40 0
 169 012c 0900000A 		beq	.L6
  41:alpha_time.c  ****        fprintf(stderr, "Error with foreImage\n");
 170              		.loc 1 41 0
 171 0130 00E000E3 		movw	lr, #:lower16:stderr
 172 0134 000000E3 		movw	r0, #:lower16:.LC4
 173              	.LVL19:
 174 0138 00E040E3 		movt	lr, #:upper16:stderr
 175 013c 000040E3 		movt	r0, #:upper16:.LC4
 176 0140 0110A0E3 		mov	r1, #1
 177 0144 1520A0E3 		mov	r2, #21
 178 0148 00309EE5 		ldr	r3, [lr, #0]
 179 014c FEFFFFEB 		bl	fwrite
  42:alpha_time.c  ****        return 4;
 180              		.loc 1 42 0
 181 0150 0400A0E1 		mov	r0, r4
 182 0154 B7FFFFEA 		b	.L3
 183              	.L6:
  44:alpha_time.c  ****      gettimeofday(&oldTv, NULL);
 184              		.loc 1 44 0
 185 0158 0010A0E3 		mov	r1, #0
 186 015c 08008DE2 		add	r0, sp, #8
 187 0160 FEFFFFEB 		bl	gettimeofday
  52:alpha_time.c  ****      gettimeofday(&newTv, NULL);
 188              		.loc 1 52 0
 189 0164 0010A0E3 		mov	r1, #0
 190 0168 0D00A0E1 		mov	r0, sp
 191 016c FEFFFFEB 		bl	gettimeofday
  53:alpha_time.c  ****      fprintf(stdout, "Routine took %d microseconds\n", (int)(newTv.tv_usec - oldTv.tv_usec));
 192              		.loc 1 53 0
 193 0170 000000E3 		movw	r0, #:lower16:stdout
 194 0174 0C309DE5 		ldr	r3, [sp, #12]
 195 0178 000040E3 		movt	r0, #:upper16:stdout
 196 017c 04209DE5 		ldr	r2, [sp, #4]
 197 0180 001000E3 		movw	r1, #:lower16:.LC5
 198 0184 001040E3 		movt	r1, #:upper16:.LC5
 199 0188 000090E5 		ldr	r0, [r0, #0]
 200 018c 022063E0 		rsb	r2, r3, r2
 201 0190 FEFFFFEB 		bl	fprintf
  54:alpha_time.c  ****      fwrite(newImage, 512*sizeof(int),512,outFile);
 202              		.loc 1 54 0
 203 0194 000000E3 		movw	r0, #:lower16:newImage
 204 0198 021BA0E3 		mov	r1, #2048
 205 019c 0820A0E1 		mov	r2, r8
 206 01a0 0730A0E1 		mov	r3, r7
 207 01a4 000040E3 		movt	r0, #:upper16:newImage
 208 01a8 FEFFFFEB 		bl	fwrite
  55:alpha_time.c  ****      fclose(fgFile);
 209              		.loc 1 55 0
 210 01ac 0600A0E1 		mov	r0, r6
 211 01b0 FEFFFFEB 		bl	fclose
  56:alpha_time.c  ****      fclose(bgFile);
 212              		.loc 1 56 0
 213 01b4 0500A0E1 		mov	r0, r5
 214 01b8 FEFFFFEB 		bl	fclose
  57:alpha_time.c  ****      fclose(outFile);
 215              		.loc 1 57 0
 216 01bc 0700A0E1 		mov	r0, r7
 217 01c0 FEFFFFEB 		bl	fclose
  58:alpha_time.c  ****      return 0;
 218              		.loc 1 58 0
 219 01c4 0000A0E3 		mov	r0, #0
 220 01c8 9AFFFFEA 		b	.L3
 221              		.cfi_endproc
 222              	.LFE14:
 224              		.align	2
 225 01cc 00F020E3 		.p2align 4,,15
 226              		.global	alphaBlend_c
 228              	alphaBlend_c:
 229              	.LFB15:
  63:alpha_time.c  **** 
  64:alpha_time.c  **** #define A(x) (((x) & 0xff000000) >> 24)
  65:alpha_time.c  **** #define R(x) (((x) & 0x00ff0000) >> 16)
  66:alpha_time.c  **** #define G(x) (((x) & 0x0000ff00) >> 8)
  67:alpha_time.c  **** #define B(x) ((x) & 0x000000ff)
  68:alpha_time.c  **** 
  69:alpha_time.c  **** void alphaBlend_c(int *fgImage, int *bgImage, int *dstImage)
  70:alpha_time.c  **** {
 230              		.loc 1 70 0
 231              		.cfi_startproc
 232              		@ args = 0, pretend = 0, frame = 16
 233              		@ frame_needed = 0, uses_anonymous_args = 0
 234              		@ link register save eliminated.
 235              	.LVL20:
 236 01d0 F00F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 237              	.LCFI2:
 238              		.cfi_def_cfa_offset 32
 239 01d4 108B2DED 		fstmfdd	sp!, {d8, d9, d10, d11, d12, d13, d14, d15}
 240              	.LCFI3:
 241              		.cfi_def_cfa_offset 96
  71:alpha_time.c  ****   int x, y;
  72:alpha_time.c  ****   for(y = 0; y < 512; y++){
  73:alpha_time.c  ****      for(x = 0; x < 512; x++){
  74:alpha_time.c  **** //  for(y = 0; y < 1; y++){
  75:alpha_time.c  **** //     for(x = 0; x < 8; x++){
  76:alpha_time.c  ****         int a_fg = A(fgImage[(y*512)+x]);
  77:alpha_time.c  ****         int dst_r = ((R(fgImage[(y*512)+x]) * a_fg) + (R(bgImage[(y*512)+x]) * (255-a_fg)))/256;
 242              		.loc 1 77 0
 243 01d8 5F6087F3 		vmov.i32	q3, #255  @ v4si
  76:alpha_time.c  ****         int a_fg = A(fgImage[(y*512)+x]);
 244              		.loc 1 76 0
 245 01dc 77C081F2 		vmov.i32	q6, #4294967272  @ v4si
 246              		.cfi_offset 94, -40
 247              		.cfi_offset 92, -48
 248              		.cfi_offset 90, -56
 249              		.cfi_offset 88, -64
 250              		.cfi_offset 86, -72
 251              		.cfi_offset 84, -80
 252              		.cfi_offset 82, -88
 253              		.cfi_offset 80, -96
 254              		.cfi_offset 11, -4
 255              		.cfi_offset 10, -8
 256              		.cfi_offset 9, -12
 257              		.cfi_offset 8, -16
 258              		.cfi_offset 7, -20
 259              		.cfi_offset 6, -24
 260              		.cfi_offset 5, -28
 261              		.cfi_offset 4, -32
  70:alpha_time.c  **** {
 262              		.loc 1 70 0
 263 01e0 10D04DE2 		sub	sp, sp, #16
 264              	.LCFI4:
 265              		.cfi_def_cfa_offset 112
  78:alpha_time.c  ****         int dst_g = ((G(fgImage[(y*512)+x]) * a_fg) + (G(bgImage[(y*512)+x]) * (255-a_fg)))/256;
  79:alpha_time.c  ****         int dst_b = ((B(fgImage[(y*512)+x]) * a_fg) + (B(bgImage[(y*512)+x]) * (255-a_fg)))/256;
 266              		.loc 1 79 0
 267 01e4 58E080F2 		vmov.i32	q7, #8  @ v4si
  69:alpha_time.c  **** void alphaBlend_c(int *fgImage, int *bgImage, int *dstImage)
 268              		.loc 1 69 0
 269 01e8 01B0A0E1 		mov	fp, r1
 270              		.loc 1 79 0
 271 01ec 7700C0F2 		vmov.i32	q8, #4294967288  @ v4si
  69:alpha_time.c  **** void alphaBlend_c(int *fgImage, int *bgImage, int *dstImage)
 272              		.loc 1 69 0
 273 01f0 04008DE5 		str	r0, [sp, #4]
  77:alpha_time.c  ****         int dst_r = ((R(fgImage[(y*512)+x]) * a_fg) + (R(bgImage[(y*512)+x]) * (255-a_fg)))/256;
 274              		.loc 1 77 0
 275 01f4 5F4487F3 		vmov.i32	q2, #16711680  @ v4si
  69:alpha_time.c  **** void alphaBlend_c(int *fgImage, int *bgImage, int *dstImage)
 276              		.loc 1 69 0
 277 01f8 100082E2 		add	r0, r2, #16
 278              	.LVL21:
 279 01fc 021CA0E3 		mov	r1, #512
 280              	.LVL22:
 281 0200 00208DE5 		str	r2, [sp, #0]
 282 0204 08008DE5 		str	r0, [sp, #8]
 283 0208 0C108DE5 		str	r1, [sp, #12]
 284              	.LVL23:
 285              	.L9:
  69:alpha_time.c  **** void alphaBlend_c(int *fgImage, int *bgImage, int *dstImage)
 286              		.loc 1 69 0 is_stmt 0 discriminator 1
 287 020c 08309DE5 		ldr	r3, [sp, #8]
 288 0210 04109DE5 		ldr	r1, [sp, #4]
 289 0214 00C09DE5 		ldr	ip, [sp, #0]
 290 0218 010053E1 		cmp	r3, r1
 291 021c 100081E2 		add	r0, r1, #16
 292 0220 0020A023 		movcs	r2, #0
 293 0224 0120A033 		movcc	r2, #1
 294 0228 0B0053E1 		cmp	r3, fp
 295 022c 10108BE2 		add	r1, fp, #16
 296 0230 0030A023 		movcs	r3, #0
 297 0234 0130A033 		movcc	r3, #1
 298 0238 01005CE1 		cmp	ip, r1
 299 023c 01308383 		orrhi	r3, r3, #1
 300 0240 00005CE1 		cmp	ip, r0
 301 0244 01208283 		orrhi	r2, r2, #1
  72:alpha_time.c  ****   for(y = 0; y < 512; y++){
 302              		.loc 1 72 0 is_stmt 1 discriminator 1
 303 0248 03C012E0 		ands	ip, r2, r3
 304 024c 0A009DE8 		ldmia	sp, {r1, r3}
 305 0250 0B20A0E1 		mov	r2, fp
  69:alpha_time.c  **** void alphaBlend_c(int *fgImage, int *bgImage, int *dstImage)
 306              		.loc 1 69 0 discriminator 1
 307 0254 0B50A001 		moveq	r5, fp
 308 0258 0160A001 		moveq	r6, r1
 309 025c 0340A001 		moveq	r4, r3
  72:alpha_time.c  ****   for(y = 0; y < 512; y++){
 310              		.loc 1 72 0 discriminator 1
 311 0260 3600000A 		beq	.L10
  77:alpha_time.c  ****         int dst_r = ((R(fgImage[(y*512)+x]) * a_fg) + (R(bgImage[(y*512)+x]) * (255-a_fg)))/256;
 312              		.loc 1 77 0
 313 0264 508081F2 		vmov.i32	q4, #16  @ v4si
  69:alpha_time.c  **** void alphaBlend_c(int *fgImage, int *bgImage, int *dstImage)
 314              		.loc 1 69 0
 315 0268 020B83E2 		add	r0, r3, #2048
  77:alpha_time.c  ****         int dst_r = ((R(fgImage[(y*512)+x]) * a_fg) + (R(bgImage[(y*512)+x]) * (255-a_fg)))/256;
 316              		.loc 1 77 0
 317 026c 7F2080F2 		vmov.i32	q1, #4294967280  @ v4si
  78:alpha_time.c  ****         int dst_g = ((G(fgImage[(y*512)+x]) * a_fg) + (G(bgImage[(y*512)+x]) * (255-a_fg)))/256;
 318              		.loc 1 78 0
 319 0270 5F0287F3 		vmov.i32	q0, #65280  @ v4si
  80:alpha_time.c  ****         dstImage[(y*512)+x] =  0xff000000 |
  81:alpha_time.c  ****                               (0x00ff0000 & (dst_r << 16)) |
 320              		.loc 1 81 0
 321 0274 5FAC87F3 		vmov.i32	q5, #65535  @ v4si
 322              	.LVL24:
 323              	.L12:
  76:alpha_time.c  ****         int a_fg = A(fgImage[(y*512)+x]);
 324              		.loc 1 76 0 discriminator 2
 325 0278 8DCA63F4 		vld1.32	{q14}, [r3]!
  77:alpha_time.c  ****         int dst_r = ((R(fgImage[(y*512)+x]) * a_fg) + (R(bgImage[(y*512)+x]) * (255-a_fg)))/256;
 326              		.loc 1 77 0 discriminator 2
 327 027c D4A14CF2 		vand	q13, q14, q2
  78:alpha_time.c  ****         int dst_g = ((G(fgImage[(y*512)+x]) * a_fg) + (G(bgImage[(y*512)+x]) * (255-a_fg)))/256;
 328              		.loc 1 78 0 discriminator 2
 329 0280 D0E14CF2 		vand	q15, q14, q0
  77:alpha_time.c  ****         int dst_r = ((R(fgImage[(y*512)+x]) * a_fg) + (R(bgImage[(y*512)+x]) * (255-a_fg)))/256;
 330              		.loc 1 77 0 discriminator 2
 331 0284 8D6A62F4 		vld1.32	{q11}, [r2]!
  76:alpha_time.c  ****         int a_fg = A(fgImage[(y*512)+x]);
 332              		.loc 1 76 0 discriminator 2
 333 0288 6C446CF3 		vshl.u32	q10, q14, q6
  80:alpha_time.c  ****         dstImage[(y*512)+x] =  0xff000000 |
 334              		.loc 1 80 0 discriminator 2
 335 028c 030050E1 		cmp	r0, r3
  77:alpha_time.c  ****         int dst_r = ((R(fgImage[(y*512)+x]) * a_fg) + (R(bgImage[(y*512)+x]) * (255-a_fg)))/256;
 336              		.loc 1 77 0 discriminator 2
 337 0290 6A2462F2 		vshl.s32	q9, q13, q1
  78:alpha_time.c  ****         int dst_g = ((G(fgImage[(y*512)+x]) * a_fg) + (G(bgImage[(y*512)+x]) * (255-a_fg)))/256;
 338              		.loc 1 78 0 discriminator 2
 339 0294 EEA460F2 		vshl.s32	q13, q15, q8
  79:alpha_time.c  ****         int dst_b = ((B(fgImage[(y*512)+x]) * a_fg) + (B(bgImage[(y*512)+x]) * (255-a_fg)))/256;
 340              		.loc 1 79 0 discriminator 2
 341 0298 D6814CF2 		vand	q12, q14, q3
  77:alpha_time.c  ****         int dst_r = ((R(fgImage[(y*512)+x]) * a_fg) + (R(bgImage[(y*512)+x]) * (255-a_fg)))/256;
 342              		.loc 1 77 0 discriminator 2
 343 029c D4E146F2 		vand	q15, q11, q2
 344 02a0 F22964F2 		vmul.i32	q9, q10, q9
  79:alpha_time.c  ****         int dst_b = ((B(fgImage[(y*512)+x]) * a_fg) + (B(bgImage[(y*512)+x]) * (255-a_fg)))/256;
 345              		.loc 1 79 0 discriminator 2
 346 02a4 F88964F2 		vmul.i32	q12, q10, q12
  78:alpha_time.c  ****         int dst_g = ((G(fgImage[(y*512)+x]) * a_fg) + (G(bgImage[(y*512)+x]) * (255-a_fg)))/256;
 347              		.loc 1 78 0 discriminator 2
 348 02a8 D0C146F2 		vand	q14, q11, q0
 349 02ac FAA964F2 		vmul.i32	q13, q10, q13
  77:alpha_time.c  ****         int dst_r = ((R(fgImage[(y*512)+x]) * a_fg) + (R(bgImage[(y*512)+x]) * (255-a_fg)))/256;
 350              		.loc 1 77 0 discriminator 2
 351 02b0 6EE462F2 		vshl.s32	q15, q15, q1
 352 02b4 644866F3 		vsub.i32	q10, q3, q10
  78:alpha_time.c  ****         int dst_g = ((G(fgImage[(y*512)+x]) * a_fg) + (G(bgImage[(y*512)+x]) * (255-a_fg)))/256;
 353              		.loc 1 78 0 discriminator 2
 354 02b8 ECC460F2 		vshl.s32	q14, q14, q8
  79:alpha_time.c  ****         int dst_b = ((B(fgImage[(y*512)+x]) * a_fg) + (B(bgImage[(y*512)+x]) * (255-a_fg)))/256;
 355              		.loc 1 79 0 discriminator 2
 356 02bc D66146F2 		vand	q11, q11, q3
  77:alpha_time.c  ****         int dst_r = ((R(fgImage[(y*512)+x]) * a_fg) + (R(bgImage[(y*512)+x]) * (255-a_fg)))/256;
 357              		.loc 1 77 0 discriminator 2
 358 02c0 EE2964F2 		vmla.i32	q9, q10, q15
  78:alpha_time.c  ****         int dst_g = ((G(fgImage[(y*512)+x]) * a_fg) + (G(bgImage[(y*512)+x]) * (255-a_fg)))/256;
 359              		.loc 1 78 0 discriminator 2
 360 02c4 ECA964F2 		vmla.i32	q13, q10, q14
  79:alpha_time.c  ****         int dst_b = ((B(fgImage[(y*512)+x]) * a_fg) + (B(bgImage[(y*512)+x]) * (255-a_fg)))/256;
 361              		.loc 1 79 0 discriminator 2
 362 02c8 E68964F2 		vmla.i32	q12, q10, q11
  77:alpha_time.c  ****         int dst_r = ((R(fgImage[(y*512)+x]) * a_fg) + (R(bgImage[(y*512)+x]) * (255-a_fg)))/256;
 363              		.loc 1 77 0 discriminator 2
 364 02cc E22460F2 		vshl.s32	q9, q9, q8
  78:alpha_time.c  ****         int dst_g = ((G(fgImage[(y*512)+x]) * a_fg) + (G(bgImage[(y*512)+x]) * (255-a_fg)))/256;
 365              		.loc 1 78 0 discriminator 2
 366 02d0 EAE460F2 		vshl.s32	q15, q13, q8
 367              		.loc 1 81 0 discriminator 2
 368 02d4 624468F2 		vshl.s32	q10, q9, q4
  79:alpha_time.c  ****         int dst_b = ((B(fgImage[(y*512)+x]) * a_fg) + (B(bgImage[(y*512)+x]) * (255-a_fg)))/256;
 369              		.loc 1 79 0 discriminator 2
 370 02d8 E86460F2 		vshl.s32	q11, q12, q8
  82:alpha_time.c  ****                               (0x0000ff00 & (dst_g << 8)) |
 371              		.loc 1 82 0 discriminator 2
 372 02dc 6EC46EF2 		vshl.s32	q14, q15, q7
 373 02e0 D68146F2 		vand	q12, q11, q3
  81:alpha_time.c  ****                               (0x00ff0000 & (dst_r << 16)) |
 374              		.loc 1 81 0 discriminator 2
 375 02e4 D46144F2 		vand	q11, q10, q2
 376 02e8 5F87C7F3 		vorr.i32	q12, #4278190080
 377 02ec DA414CF2 		vand	q10, q14, q5
 378              		.loc 1 82 0 discriminator 2
 379 02f0 F62168F2 		vorr	q9, q12, q11
 380 02f4 F4A162F2 		vorr	q13, q9, q10
  80:alpha_time.c  ****         dstImage[(y*512)+x] =  0xff000000 |
 381              		.loc 1 80 0 discriminator 2
 382 02f8 8DAA41F4 		vst1.32	{q13}, [r1]!
 383 02fc DDFFFF1A 		bne	.L12
 384              	.LVL25:
 385              	.L11:
  72:alpha_time.c  ****   for(y = 0; y < 512; y++){
 386              		.loc 1 72 0
 387 0300 0C309DE5 		ldr	r3, [sp, #12]
  80:alpha_time.c  ****         dstImage[(y*512)+x] =  0xff000000 |
 388              		.loc 1 80 0
 389 0304 02BB8BE2 		add	fp, fp, #2048
 390 0308 00C09DE5 		ldr	ip, [sp, #0]
  72:alpha_time.c  ****   for(y = 0; y < 512; y++){
 391              		.loc 1 72 0
 392 030c 011053E2 		subs	r1, r3, #1
  80:alpha_time.c  ****         dstImage[(y*512)+x] =  0xff000000 |
 393              		.loc 1 80 0
 394 0310 08309DE5 		ldr	r3, [sp, #8]
  72:alpha_time.c  ****   for(y = 0; y < 512; y++){
 395              		.loc 1 72 0
 396 0314 0C108DE5 		str	r1, [sp, #12]
  80:alpha_time.c  ****         dstImage[(y*512)+x] =  0xff000000 |
 397              		.loc 1 80 0
 398 0318 04008DE5 		str	r0, [sp, #4]
 399 031c 021B83E2 		add	r1, r3, #2048
 400 0320 020B8CE2 		add	r0, ip, #2048
 401 0324 08108DE5 		str	r1, [sp, #8]
 402 0328 00008DE5 		str	r0, [sp, #0]
  72:alpha_time.c  ****   for(y = 0; y < 512; y++){
 403              		.loc 1 72 0
 404 032c B6FFFF1A 		bne	.L9
  83:alpha_time.c  ****                               (0x000000ff & (dst_b));
  84:alpha_time.c  **** //		printf("a_fg[%d]: %d\n", (y*512)+x, a_fg);
  85:alpha_time.c  **** //		printf("dst_r[%d]: %d\n", (y*512)+x, dst_r);
  86:alpha_time.c  **** //		printf("dst_g[%d]: %d\n", (y*512)+x, dst_g);
  87:alpha_time.c  **** //		printf("dst_b[%d]: %d\n", (y*512)+x, dst_b);
  88:alpha_time.c  **** //		printf("dst[%u]: %u\n", (y*512)+x, dstImage[(y*512)+x]);
  89:alpha_time.c  ****      }
  90:alpha_time.c  ****   }
  91:alpha_time.c  **** }
 405              		.loc 1 91 0
 406 0330 10D08DE2 		add	sp, sp, #16
 407 0334 108BBDEC 		fldmfdd	sp!, {d8, d9, d10, d11, d12, d13, d14, d15}
 408 0338 F00FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 409 033c 1EFF2FE1 		bx	lr
 410              		.p2align 4
 411              	.L10:
 412              	.LBB2:
  76:alpha_time.c  ****         int a_fg = A(fgImage[(y*512)+x]);
 413              		.loc 1 76 0
 414 0340 042094E4 		ldr	r2, [r4], #4
 415              	.LBE2:
  73:alpha_time.c  ****      for(x = 0; x < 512; x++){
 416              		.loc 1 73 0
 417 0344 01C08CE2 		add	ip, ip, #1
 418              	.LBB3:
  77:alpha_time.c  ****         int dst_r = ((R(fgImage[(y*512)+x]) * a_fg) + (R(bgImage[(y*512)+x]) * (255-a_fg)))/256;
 419              		.loc 1 77 0
 420 0348 040095E4 		ldr	r0, [r5], #4
 421              	.LBE3:
  73:alpha_time.c  ****      for(x = 0; x < 512; x++){
 422              		.loc 1 73 0
 423 034c 020C5CE3 		cmp	ip, #512
 424              	.LBB4:
  77:alpha_time.c  ****         int dst_r = ((R(fgImage[(y*512)+x]) * a_fg) + (R(bgImage[(y*512)+x]) * (255-a_fg)))/256;
 425              		.loc 1 77 0
 426 0350 52A8E7E7 		ubfx	sl, r2, #16, #8
  79:alpha_time.c  ****         int dst_b = ((B(fgImage[(y*512)+x]) * a_fg) + (B(bgImage[(y*512)+x]) * (255-a_fg)))/256;
 427              		.loc 1 79 0
 428 0354 FF8002E2 		and	r8, r2, #255
  76:alpha_time.c  ****         int a_fg = A(fgImage[(y*512)+x]);
 429              		.loc 1 76 0
 430 0358 223CA0E1 		mov	r3, r2, lsr #24
 431              	.LVL26:
  77:alpha_time.c  ****         int dst_r = ((R(fgImage[(y*512)+x]) * a_fg) + (R(bgImage[(y*512)+x]) * (255-a_fg)))/256;
 432              		.loc 1 77 0
 433 035c 5098E7E7 		ubfx	r9, r0, #16, #8
 434 0360 FF1063E2 		rsb	r1, r3, #255
 435              	.LVL27:
  79:alpha_time.c  ****         int dst_b = ((B(fgImage[(y*512)+x]) * a_fg) + (B(bgImage[(y*512)+x]) * (255-a_fg)))/256;
 436              		.loc 1 79 0
 437 0364 FF7000E2 		and	r7, r0, #255
  77:alpha_time.c  ****         int dst_r = ((R(fgImage[(y*512)+x]) * a_fg) + (R(bgImage[(y*512)+x]) * (255-a_fg)))/256;
 438              		.loc 1 77 0
 439 0368 9A030AE0 		mul	sl, sl, r3
  78:alpha_time.c  ****         int dst_g = ((G(fgImage[(y*512)+x]) * a_fg) + (G(bgImage[(y*512)+x]) * (255-a_fg)))/256;
 440              		.loc 1 78 0
 441 036c 5224E7E7 		ubfx	r2, r2, #8, #8
  77:alpha_time.c  ****         int dst_r = ((R(fgImage[(y*512)+x]) * a_fg) + (R(bgImage[(y*512)+x]) * (255-a_fg)))/256;
 442              		.loc 1 77 0
 443 0370 99A12AE0 		mla	sl, r9, r1, sl
  78:alpha_time.c  ****         int dst_g = ((G(fgImage[(y*512)+x]) * a_fg) + (G(bgImage[(y*512)+x]) * (255-a_fg)))/256;
 444              		.loc 1 78 0
 445 0374 5004E7E7 		ubfx	r0, r0, #8, #8
  79:alpha_time.c  ****         int dst_b = ((B(fgImage[(y*512)+x]) * a_fg) + (B(bgImage[(y*512)+x]) * (255-a_fg)))/256;
 446              		.loc 1 79 0
 447 0378 980308E0 		mul	r8, r8, r3
 448 037c 978128E0 		mla	r8, r7, r1, r8
  78:alpha_time.c  ****         int dst_g = ((G(fgImage[(y*512)+x]) * a_fg) + (G(bgImage[(y*512)+x]) * (255-a_fg)))/256;
 449              		.loc 1 78 0
 450 0380 920302E0 		mul	r2, r2, r3
  81:alpha_time.c  ****                               (0x00ff0000 & (dst_r << 16)) |
 451              		.loc 1 81 0
 452 0384 0AA4A0E1 		mov	sl, sl, asl #8
  78:alpha_time.c  ****         int dst_g = ((G(fgImage[(y*512)+x]) * a_fg) + (G(bgImage[(y*512)+x]) * (255-a_fg)))/256;
 453              		.loc 1 78 0
 454 0388 902121E0 		mla	r1, r0, r1, r2
  82:alpha_time.c  ****                               (0x0000ff00 & (dst_g << 8)) |
 455              		.loc 1 82 0
 456 038c 5884E7E7 		ubfx	r8, r8, #8, #8
  81:alpha_time.c  ****                               (0x00ff0000 & (dst_r << 16)) |
 457              		.loc 1 81 0
 458 0390 FF8488E3 		orr	r8, r8, #-16777216
 459 0394 FFA80AE2 		and	sl, sl, #16711680
  82:alpha_time.c  ****                               (0x0000ff00 & (dst_g << 8)) |
 460              		.loc 1 82 0
 461 0398 0A2088E1 		orr	r2, r8, sl
  81:alpha_time.c  ****                               (0x00ff0000 & (dst_r << 16)) |
 462              		.loc 1 81 0
 463 039c FF3C01E2 		and	r3, r1, #65280
 464              	.LVL28:
  82:alpha_time.c  ****                               (0x0000ff00 & (dst_g << 8)) |
 465              		.loc 1 82 0
 466 03a0 032082E1 		orr	r2, r2, r3
  80:alpha_time.c  ****         dstImage[(y*512)+x] =  0xff000000 |
 467              		.loc 1 80 0
 468 03a4 042086E4 		str	r2, [r6], #4
 469              	.LBE4:
  73:alpha_time.c  ****      for(x = 0; x < 512; x++){
 470              		.loc 1 73 0
 471 03a8 E4FFFF1A 		bne	.L10
 472 03ac 04C09DE5 		ldr	ip, [sp, #4]
 473              	.LVL29:
 474 03b0 020B8CE2 		add	r0, ip, #2048
 475 03b4 D1FFFFEA 		b	.L11
 476              		.cfi_endproc
 477              	.LFE15:
 479              		.align	2
 480 03b8 00F020E3 		.p2align 4,,15
 480      00F020E3 
 481              		.global	alphaBlend_flat
 483              	alphaBlend_flat:
 484              	.LFB16:
  92:alpha_time.c  **** 
  93:alpha_time.c  **** void alphaBlend_flat(int *fgImage, int *bgImage, int *dstImage)
  94:alpha_time.c  **** {
 485              		.loc 1 94 0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 489              		@ link register save eliminated.
 490              	.LVL30:
  93:alpha_time.c  **** void alphaBlend_flat(int *fgImage, int *bgImage, int *dstImage)
 491              		.loc 1 93 0
 492 03c0 103082E2 		add	r3, r2, #16
 493 03c4 00C0A0E1 		mov	ip, r0
 494 03c8 000053E1 		cmp	r3, r0
 495              		.loc 1 94 0
 496 03cc F00F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 497              	.LCFI5:
 498              		.cfi_def_cfa_offset 32
 499 03d0 108B2DED 		fstmfdd	sp!, {d8, d9, d10, d11, d12, d13, d14, d15}
 500              	.LCFI6:
 501              		.cfi_def_cfa_offset 96
  93:alpha_time.c  **** void alphaBlend_flat(int *fgImage, int *bgImage, int *dstImage)
 502              		.loc 1 93 0
 503 03d4 0050A023 		movcs	r5, #0
 504              		.cfi_offset 94, -40
 505              		.cfi_offset 92, -48
 506              		.cfi_offset 90, -56
 507              		.cfi_offset 88, -64
 508              		.cfi_offset 86, -72
 509              		.cfi_offset 84, -80
 510              		.cfi_offset 82, -88
 511              		.cfi_offset 80, -96
 512              		.cfi_offset 11, -4
 513              		.cfi_offset 10, -8
 514              		.cfi_offset 9, -12
 515              		.cfi_offset 8, -16
 516              		.cfi_offset 7, -20
 517              		.cfi_offset 6, -24
 518              		.cfi_offset 5, -28
 519              		.cfi_offset 4, -32
 520 03d8 0150A033 		movcc	r5, #1
 521 03dc 107080E2 		add	r7, r0, #16
 522 03e0 106081E2 		add	r6, r1, #16
 523 03e4 070052E1 		cmp	r2, r7
 524 03e8 01508583 		orrhi	r5, r5, #1
 525 03ec 030051E1 		cmp	r1, r3
 526 03f0 06005291 		cmpls	r2, r6
 527              		.loc 1 94 0
 528 03f4 02B0A0E1 		mov	fp, r2
  93:alpha_time.c  **** void alphaBlend_flat(int *fgImage, int *bgImage, int *dstImage)
 529              		.loc 1 93 0
 530 03f8 0030A093 		movls	r3, #0
 531 03fc 0130A083 		movhi	r3, #1
 532 0400 0140A0E1 		mov	r4, r1
 533 0404 033015E0 		ands	r3, r5, r3
 534 0408 3000000A 		beq	.L22
  95:alpha_time.c  ****   int y;
  96:alpha_time.c  ****   for(y = 0; y < 262144; y++){
  97:alpha_time.c  **** 	int a_fg = A(fgImage[y]);
 535              		.loc 1 97 0
 536 040c 778081F2 		vmov.i32	q4, #4294967272  @ v4si
  93:alpha_time.c  **** void alphaBlend_flat(int *fgImage, int *bgImage, int *dstImage)
 537              		.loc 1 93 0
 538 0410 013680E2 		add	r3, r0, #1048576
  98:alpha_time.c  **** 	int dst_r = ((R(fgImage[y]) * a_fg) + (R(bgImage[y]) * (255-a_fg)))/256;
 539              		.loc 1 98 0
 540 0414 5F6087F3 		vmov.i32	q3, #255  @ v4si
  99:alpha_time.c  **** 	int dst_g = ((G(fgImage[y]) * a_fg) + (G(bgImage[y]) * (255-a_fg)))/256;
 100:alpha_time.c  **** 	int dst_b = ((B(fgImage[y]) * a_fg) + (B(bgImage[y]) * (255-a_fg)))/256;
 541              		.loc 1 100 0
 542 0418 58A080F2 		vmov.i32	q5, #8  @ v4si
 543 041c 7700C0F2 		vmov.i32	q8, #4294967288  @ v4si
  98:alpha_time.c  **** 	int dst_r = ((R(fgImage[y]) * a_fg) + (R(bgImage[y]) * (255-a_fg)))/256;
 544              		.loc 1 98 0
 545 0420 5F4487F3 		vmov.i32	q2, #16711680  @ v4si
 546 0424 50C081F2 		vmov.i32	q6, #16  @ v4si
 547 0428 7F2080F2 		vmov.i32	q1, #4294967280  @ v4si
  99:alpha_time.c  **** 	int dst_g = ((G(fgImage[y]) * a_fg) + (G(bgImage[y]) * (255-a_fg)))/256;
 548              		.loc 1 99 0
 549 042c 5F0287F3 		vmov.i32	q0, #65280  @ v4si
 101:alpha_time.c  **** 	dstImage[y] =  0xff000000 |
 102:alpha_time.c  **** 						  (0x00ff0000 & (dst_r << 16)) |
 550              		.loc 1 102 0
 551 0430 5FEC87F3 		vmov.i32	q7, #65535  @ v4si
 552              	.LVL31:
 553              	.L20:
  97:alpha_time.c  **** 	int a_fg = A(fgImage[y]);
 554              		.loc 1 97 0 discriminator 2
 555 0434 8DCA6CF4 		vld1.32	{q14}, [ip]!
  98:alpha_time.c  **** 	int dst_r = ((R(fgImage[y]) * a_fg) + (R(bgImage[y]) * (255-a_fg)))/256;
 556              		.loc 1 98 0 discriminator 2
 557 0438 D4A14CF2 		vand	q13, q14, q2
  99:alpha_time.c  **** 	int dst_g = ((G(fgImage[y]) * a_fg) + (G(bgImage[y]) * (255-a_fg)))/256;
 558              		.loc 1 99 0 discriminator 2
 559 043c D0E14CF2 		vand	q15, q14, q0
  98:alpha_time.c  **** 	int dst_r = ((R(fgImage[y]) * a_fg) + (R(bgImage[y]) * (255-a_fg)))/256;
 560              		.loc 1 98 0 discriminator 2
 561 0440 8D6A64F4 		vld1.32	{q11}, [r4]!
  97:alpha_time.c  **** 	int a_fg = A(fgImage[y]);
 562              		.loc 1 97 0 discriminator 2
 563 0444 6C4468F3 		vshl.u32	q10, q14, q4
 101:alpha_time.c  **** 	dstImage[y] =  0xff000000 |
 564              		.loc 1 101 0 discriminator 2
 565 0448 03005CE1 		cmp	ip, r3
  98:alpha_time.c  **** 	int dst_r = ((R(fgImage[y]) * a_fg) + (R(bgImage[y]) * (255-a_fg)))/256;
 566              		.loc 1 98 0 discriminator 2
 567 044c 6A2462F2 		vshl.s32	q9, q13, q1
  99:alpha_time.c  **** 	int dst_g = ((G(fgImage[y]) * a_fg) + (G(bgImage[y]) * (255-a_fg)))/256;
 568              		.loc 1 99 0 discriminator 2
 569 0450 EEA460F2 		vshl.s32	q13, q15, q8
 100:alpha_time.c  **** 	int dst_b = ((B(fgImage[y]) * a_fg) + (B(bgImage[y]) * (255-a_fg)))/256;
 570              		.loc 1 100 0 discriminator 2
 571 0454 D6814CF2 		vand	q12, q14, q3
  98:alpha_time.c  **** 	int dst_r = ((R(fgImage[y]) * a_fg) + (R(bgImage[y]) * (255-a_fg)))/256;
 572              		.loc 1 98 0 discriminator 2
 573 0458 D4E146F2 		vand	q15, q11, q2
 574 045c F22964F2 		vmul.i32	q9, q10, q9
 100:alpha_time.c  **** 	int dst_b = ((B(fgImage[y]) * a_fg) + (B(bgImage[y]) * (255-a_fg)))/256;
 575              		.loc 1 100 0 discriminator 2
 576 0460 F88964F2 		vmul.i32	q12, q10, q12
  99:alpha_time.c  **** 	int dst_g = ((G(fgImage[y]) * a_fg) + (G(bgImage[y]) * (255-a_fg)))/256;
 577              		.loc 1 99 0 discriminator 2
 578 0464 D0C146F2 		vand	q14, q11, q0
 579 0468 FAA964F2 		vmul.i32	q13, q10, q13
  98:alpha_time.c  **** 	int dst_r = ((R(fgImage[y]) * a_fg) + (R(bgImage[y]) * (255-a_fg)))/256;
 580              		.loc 1 98 0 discriminator 2
 581 046c 6EE462F2 		vshl.s32	q15, q15, q1
 582 0470 644866F3 		vsub.i32	q10, q3, q10
  99:alpha_time.c  **** 	int dst_g = ((G(fgImage[y]) * a_fg) + (G(bgImage[y]) * (255-a_fg)))/256;
 583              		.loc 1 99 0 discriminator 2
 584 0474 ECC460F2 		vshl.s32	q14, q14, q8
 100:alpha_time.c  **** 	int dst_b = ((B(fgImage[y]) * a_fg) + (B(bgImage[y]) * (255-a_fg)))/256;
 585              		.loc 1 100 0 discriminator 2
 586 0478 D66146F2 		vand	q11, q11, q3
  98:alpha_time.c  **** 	int dst_r = ((R(fgImage[y]) * a_fg) + (R(bgImage[y]) * (255-a_fg)))/256;
 587              		.loc 1 98 0 discriminator 2
 588 047c EE2964F2 		vmla.i32	q9, q10, q15
  99:alpha_time.c  **** 	int dst_g = ((G(fgImage[y]) * a_fg) + (G(bgImage[y]) * (255-a_fg)))/256;
 589              		.loc 1 99 0 discriminator 2
 590 0480 ECA964F2 		vmla.i32	q13, q10, q14
 100:alpha_time.c  **** 	int dst_b = ((B(fgImage[y]) * a_fg) + (B(bgImage[y]) * (255-a_fg)))/256;
 591              		.loc 1 100 0 discriminator 2
 592 0484 E68964F2 		vmla.i32	q12, q10, q11
  98:alpha_time.c  **** 	int dst_r = ((R(fgImage[y]) * a_fg) + (R(bgImage[y]) * (255-a_fg)))/256;
 593              		.loc 1 98 0 discriminator 2
 594 0488 E22460F2 		vshl.s32	q9, q9, q8
  99:alpha_time.c  **** 	int dst_g = ((G(fgImage[y]) * a_fg) + (G(bgImage[y]) * (255-a_fg)))/256;
 595              		.loc 1 99 0 discriminator 2
 596 048c EAE460F2 		vshl.s32	q15, q13, q8
 597              		.loc 1 102 0 discriminator 2
 598 0490 62446CF2 		vshl.s32	q10, q9, q6
 100:alpha_time.c  **** 	int dst_b = ((B(fgImage[y]) * a_fg) + (B(bgImage[y]) * (255-a_fg)))/256;
 599              		.loc 1 100 0 discriminator 2
 600 0494 E86460F2 		vshl.s32	q11, q12, q8
 103:alpha_time.c  **** 						  (0x0000ff00 & (dst_g << 8)) |
 601              		.loc 1 103 0 discriminator 2
 602 0498 6EC46AF2 		vshl.s32	q14, q15, q5
 603 049c D68146F2 		vand	q12, q11, q3
 102:alpha_time.c  **** 						  (0x00ff0000 & (dst_r << 16)) |
 604              		.loc 1 102 0 discriminator 2
 605 04a0 D46144F2 		vand	q11, q10, q2
 606 04a4 5F87C7F3 		vorr.i32	q12, #4278190080
 607 04a8 DE414CF2 		vand	q10, q14, q7
 608              		.loc 1 103 0 discriminator 2
 609 04ac F62168F2 		vorr	q9, q12, q11
 610 04b0 F4A162F2 		vorr	q13, q9, q10
 101:alpha_time.c  **** 	dstImage[y] =  0xff000000 |
 611              		.loc 1 101 0 discriminator 2
 612 04b4 8DAA42F4 		vst1.32	{q13}, [r2]!
 613 04b8 DDFFFF1A 		bne	.L20
 614              	.LVL32:
 615              	.L18:
 104:alpha_time.c  **** 						  (0x000000ff & (dst_b));
 105:alpha_time.c  ****   }
 106:alpha_time.c  **** }
 616              		.loc 1 106 0
 617 04bc 108BBDEC 		fldmfdd	sp!, {d8, d9, d10, d11, d12, d13, d14, d15}
 618 04c0 F00FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 619 04c4 1EFF2FE1 		bx	lr
 620 04c8 00F020E3 		.p2align 4
 620      00F020E3 
 621              	.L22:
 622              	.LBB5:
  97:alpha_time.c  **** 	int a_fg = A(fgImage[y]);
 623              		.loc 1 97 0
 624 04d0 034090E7 		ldr	r4, [r0, r3]
 101:alpha_time.c  **** 	dstImage[y] =  0xff000000 |
 625              		.loc 1 101 0
 626 04d4 042083E2 		add	r2, r3, #4
  98:alpha_time.c  **** 	int dst_r = ((R(fgImage[y]) * a_fg) + (R(bgImage[y]) * (255-a_fg)))/256;
 627              		.loc 1 98 0
 628 04d8 036091E7 		ldr	r6, [r1, r3]
 629 04dc 54A8E7E7 		ubfx	sl, r4, #16, #8
 100:alpha_time.c  **** 	int dst_b = ((B(fgImage[y]) * a_fg) + (B(bgImage[y]) * (255-a_fg)))/256;
 630              		.loc 1 100 0
 631 04e0 FF8004E2 		and	r8, r4, #255
  97:alpha_time.c  **** 	int a_fg = A(fgImage[y]);
 632              		.loc 1 97 0
 633 04e4 24CCA0E1 		mov	ip, r4, lsr #24
 634              	.LVL33:
  98:alpha_time.c  **** 	int dst_r = ((R(fgImage[y]) * a_fg) + (R(bgImage[y]) * (255-a_fg)))/256;
 635              		.loc 1 98 0
 636 04e8 5698E7E7 		ubfx	r9, r6, #16, #8
 637 04ec FF506CE2 		rsb	r5, ip, #255
 100:alpha_time.c  **** 	int dst_b = ((B(fgImage[y]) * a_fg) + (B(bgImage[y]) * (255-a_fg)))/256;
 638              		.loc 1 100 0
 639 04f0 FF7006E2 		and	r7, r6, #255
  98:alpha_time.c  **** 	int dst_r = ((R(fgImage[y]) * a_fg) + (R(bgImage[y]) * (255-a_fg)))/256;
 640              		.loc 1 98 0
 641 04f4 9A0C0AE0 		mul	sl, sl, ip
  99:alpha_time.c  **** 	int dst_g = ((G(fgImage[y]) * a_fg) + (G(bgImage[y]) * (255-a_fg)))/256;
 642              		.loc 1 99 0
 643 04f8 5444E7E7 		ubfx	r4, r4, #8, #8
  98:alpha_time.c  **** 	int dst_r = ((R(fgImage[y]) * a_fg) + (R(bgImage[y]) * (255-a_fg)))/256;
 644              		.loc 1 98 0
 645 04fc 99A52AE0 		mla	sl, r9, r5, sl
  99:alpha_time.c  **** 	int dst_g = ((G(fgImage[y]) * a_fg) + (G(bgImage[y]) * (255-a_fg)))/256;
 646              		.loc 1 99 0
 647 0500 5664E7E7 		ubfx	r6, r6, #8, #8
 100:alpha_time.c  **** 	int dst_b = ((B(fgImage[y]) * a_fg) + (B(bgImage[y]) * (255-a_fg)))/256;
 648              		.loc 1 100 0
 649 0504 980C08E0 		mul	r8, r8, ip
 650 0508 978529E0 		mla	r9, r7, r5, r8
  99:alpha_time.c  **** 	int dst_g = ((G(fgImage[y]) * a_fg) + (G(bgImage[y]) * (255-a_fg)))/256;
 651              		.loc 1 99 0
 652 050c 940C0CE0 		mul	ip, r4, ip
 653              	.LVL34:
 102:alpha_time.c  **** 						  (0x00ff0000 & (dst_r << 16)) |
 654              		.loc 1 102 0
 655 0510 0AA4A0E1 		mov	sl, sl, asl #8
  99:alpha_time.c  **** 	int dst_g = ((G(fgImage[y]) * a_fg) + (G(bgImage[y]) * (255-a_fg)))/256;
 656              		.loc 1 99 0
 657 0514 96C528E0 		mla	r8, r6, r5, ip
 103:alpha_time.c  **** 						  (0x0000ff00 & (dst_g << 8)) |
 658              		.loc 1 103 0
 659 0518 5944E7E7 		ubfx	r4, r9, #8, #8
 102:alpha_time.c  **** 						  (0x00ff0000 & (dst_r << 16)) |
 660              		.loc 1 102 0
 661 051c FF7484E3 		orr	r7, r4, #-16777216
 662 0520 FF680AE2 		and	r6, sl, #16711680
 103:alpha_time.c  **** 						  (0x0000ff00 & (dst_g << 8)) |
 663              		.loc 1 103 0
 664 0524 06C087E1 		orr	ip, r7, r6
 102:alpha_time.c  **** 						  (0x00ff0000 & (dst_r << 16)) |
 665              		.loc 1 102 0
 666 0528 FF5C08E2 		and	r5, r8, #65280
 103:alpha_time.c  **** 						  (0x0000ff00 & (dst_g << 8)) |
 667              		.loc 1 103 0
 668 052c 05908CE1 		orr	r9, ip, r5
 101:alpha_time.c  **** 	dstImage[y] =  0xff000000 |
 669              		.loc 1 101 0
 670 0530 03908BE7 		str	r9, [fp, r3]
  97:alpha_time.c  **** 	int a_fg = A(fgImage[y]);
 671              		.loc 1 97 0
 672 0534 024090E7 		ldr	r4, [r0, r2]
 101:alpha_time.c  **** 	dstImage[y] =  0xff000000 |
 673              		.loc 1 101 0
 674 0538 083083E2 		add	r3, r3, #8
  98:alpha_time.c  **** 	int dst_r = ((R(fgImage[y]) * a_fg) + (R(bgImage[y]) * (255-a_fg)))/256;
 675              		.loc 1 98 0
 676 053c 026091E7 		ldr	r6, [r1, r2]
 677              	.LBE5:
  96:alpha_time.c  ****   for(y = 0; y < 262144; y++){
 678              		.loc 1 96 0
 679 0540 010653E3 		cmp	r3, #1048576
 680              	.LBB6:
  98:alpha_time.c  **** 	int dst_r = ((R(fgImage[y]) * a_fg) + (R(bgImage[y]) * (255-a_fg)))/256;
 681              		.loc 1 98 0
 682 0544 54A8E7E7 		ubfx	sl, r4, #16, #8
 100:alpha_time.c  **** 	int dst_b = ((B(fgImage[y]) * a_fg) + (B(bgImage[y]) * (255-a_fg)))/256;
 683              		.loc 1 100 0
 684 0548 FF8004E2 		and	r8, r4, #255
  97:alpha_time.c  **** 	int a_fg = A(fgImage[y]);
 685              		.loc 1 97 0
 686 054c 24CCA0E1 		mov	ip, r4, lsr #24
  98:alpha_time.c  **** 	int dst_r = ((R(fgImage[y]) * a_fg) + (R(bgImage[y]) * (255-a_fg)))/256;
 687              		.loc 1 98 0
 688 0550 5698E7E7 		ubfx	r9, r6, #16, #8
 689 0554 FF506CE2 		rsb	r5, ip, #255
 100:alpha_time.c  **** 	int dst_b = ((B(fgImage[y]) * a_fg) + (B(bgImage[y]) * (255-a_fg)))/256;
 690              		.loc 1 100 0
 691 0558 FF7006E2 		and	r7, r6, #255
  98:alpha_time.c  **** 	int dst_r = ((R(fgImage[y]) * a_fg) + (R(bgImage[y]) * (255-a_fg)))/256;
 692              		.loc 1 98 0
 693 055c 9A0C0AE0 		mul	sl, sl, ip
  99:alpha_time.c  **** 	int dst_g = ((G(fgImage[y]) * a_fg) + (G(bgImage[y]) * (255-a_fg)))/256;
 694              		.loc 1 99 0
 695 0560 5444E7E7 		ubfx	r4, r4, #8, #8
  98:alpha_time.c  **** 	int dst_r = ((R(fgImage[y]) * a_fg) + (R(bgImage[y]) * (255-a_fg)))/256;
 696              		.loc 1 98 0
 697 0564 99A52AE0 		mla	sl, r9, r5, sl
  99:alpha_time.c  **** 	int dst_g = ((G(fgImage[y]) * a_fg) + (G(bgImage[y]) * (255-a_fg)))/256;
 698              		.loc 1 99 0
 699 0568 5664E7E7 		ubfx	r6, r6, #8, #8
 100:alpha_time.c  **** 	int dst_b = ((B(fgImage[y]) * a_fg) + (B(bgImage[y]) * (255-a_fg)))/256;
 700              		.loc 1 100 0
 701 056c 980C08E0 		mul	r8, r8, ip
 702 0570 978527E0 		mla	r7, r7, r5, r8
  99:alpha_time.c  **** 	int dst_g = ((G(fgImage[y]) * a_fg) + (G(bgImage[y]) * (255-a_fg)))/256;
 703              		.loc 1 99 0
 704 0574 940C04E0 		mul	r4, r4, ip
 102:alpha_time.c  **** 						  (0x00ff0000 & (dst_r << 16)) |
 705              		.loc 1 102 0
 706 0578 0AA4A0E1 		mov	sl, sl, asl #8
  99:alpha_time.c  **** 	int dst_g = ((G(fgImage[y]) * a_fg) + (G(bgImage[y]) * (255-a_fg)))/256;
 707              		.loc 1 99 0
 708 057c 96452CE0 		mla	ip, r6, r5, r4
 103:alpha_time.c  **** 						  (0x0000ff00 & (dst_g << 8)) |
 709              		.loc 1 103 0
 710 0580 5754E7E7 		ubfx	r5, r7, #8, #8
 102:alpha_time.c  **** 						  (0x00ff0000 & (dst_r << 16)) |
 711              		.loc 1 102 0
 712 0584 FF7485E3 		orr	r7, r5, #-16777216
 713 0588 FFA80AE2 		and	sl, sl, #16711680
 103:alpha_time.c  **** 						  (0x0000ff00 & (dst_g << 8)) |
 714              		.loc 1 103 0
 715 058c 0A7087E1 		orr	r7, r7, sl
 102:alpha_time.c  **** 						  (0x00ff0000 & (dst_r << 16)) |
 716              		.loc 1 102 0
 717 0590 FF5C0CE2 		and	r5, ip, #65280
 103:alpha_time.c  **** 						  (0x0000ff00 & (dst_g << 8)) |
 718              		.loc 1 103 0
 719 0594 055087E1 		orr	r5, r7, r5
 101:alpha_time.c  **** 	dstImage[y] =  0xff000000 |
 720              		.loc 1 101 0
 721 0598 02508BE7 		str	r5, [fp, r2]
 722              	.LBE6:
  96:alpha_time.c  ****   for(y = 0; y < 262144; y++){
 723              		.loc 1 96 0
 724 059c CBFFFF1A 		bne	.L22
 725 05a0 C5FFFFEA 		b	.L18
 726              		.cfi_endproc
 727              	.LFE16:
 729              		.comm	backImage,1048576,16
 730              		.comm	foreImage,1048576,16
 731              		.comm	newImage,1048576,16
 732              		.section	.rodata.str1.4,"aMS",%progbits,1
 733              		.align	2
 734              	.LC0:
 735 0000 55736167 		.ascii	"Usage:%s foreground background outFile\012\000"
 735      653A2573 
 735      20666F72 
 735      6567726F 
 735      756E6420 
 736              	.LC1:
 737 0028 726200   		.ascii	"rb\000"
 738 002b 00       		.space	1
 739              	.LC2:
 740 002c 776200   		.ascii	"wb\000"
 741 002f 00       		.space	1
 742              	.LC3:
 743 0030 4572726F 		.ascii	"Error with backImage\012\000"
 743      72207769 
 743      74682062 
 743      61636B49 
 743      6D616765 
 744 0046 0000     		.space	2
 745              	.LC4:
 746 0048 4572726F 		.ascii	"Error with foreImage\012\000"
 746      72207769 
 746      74682066 
 746      6F726549 
 746      6D616765 
 747 005e 0000     		.space	2
 748              	.LC5:
 749 0060 526F7574 		.ascii	"Routine took %d microseconds\012\000"
 749      696E6520 
 749      746F6F6B 
 749      20256420 
 749      6D696372 
 750 007e 0000     		.space	2
 751              	.LC6:
 752 0080 50726F62 		.ascii	"Problem opening a file\012\000"
 752      6C656D20 
 752      6F70656E 
 752      696E6720 
 752      61206669 
 753              		.text
 754              	.Letext0:
